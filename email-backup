#!rsc
# RouterOS script: email-backup
# Copyright (c) 2013-2019 Christian Hesse <mail@eworm.de>
#
# create and email backup and config file

:global Identity;
:global Domain;
:global EmailBackupTo;
:global EmailBackupCc;
:global BackupSendBinary;
:global BackupSendExport;
:global BackupCloud;
:global BackupPassword;

:if ($BackupSendBinary != true && \
     $BackupSendExport != true && \
     $BackupCloud != true) do={
  :log error ("Configured to send neither backup nor config export.");
  :error "Error: See log for details.";
}

# filename based on identity
:local FileName ($Identity . "." . $Domain);
:local CloudStatus $BackupCloud;
:local BackupStatus $BackupSendBinary;
:local ConfigStatus $BackupSendExport;
:local Attach [ :toarray "" ];

# get some system information
:local BoardName [ / system resource get board-name ];
:local Model [ / system routerboard get model ];
:local SerialNumber [ / system routerboard get serial-number ];
:local Channel [ / system package update get channel ];
:local InstalledVersion [ / system package update get installed-version ];

# binary backup
:if ($BackupSendBinary = true || \
     $BackupCloud = true) do={
  / system backup save encryption=aes-sha256 name=$FileName password=$BackupPassword;

  # attach to mail
  :if ($BackupSendBinary = true) do={
    :set BackupStatus ($FileName . ".backup");
    :set Attach ($Attach, $BackupStatus);
  }

  # upload to cloud
  :if ($BackupCloud = true) do={
    :do {
      # we are not interested in output, but print without count-only is
      # required to fetch information from cloud
      / system backup cloud print as-value;
      :if ([ / system backup cloud print count-only ] > 0) do={
        / system backup cloud upload-file action=upload src-file=($FileName . ".backup") \
            replace=[ get ([ find ]->0) name ];
      } else={
        / system backup cloud upload-file action=upload src-file=($FileName . ".backup");
      }
      :set CloudStatus [ / system backup cloud get ([ find ]->0) secret-download-key ];
    } on-error={
      :set CloudStatus "failed";
    }
  }
}

# create configuration export
:if ($BackupSendExport = true) do={
  / export terse file=$FileName;
  :set ConfigStatus ($FileName . ".rsc");
  :set Attach ($Attach, $ConfigStatus);
}

# send email with status and files
/ tool e-mail send to=$EmailBackupTo cc=$EmailBackupCc \
    subject=("[" . $Identity . "] Backup & Config") \
    body=("Backup and config export for " . $Identity . ".\n\n" . \
      "Board name:      " . $BoardName . "\n" . \
      "Model:           " . $Model . "\n" . \
      "Serial number:   " . $SerialNumber . "\n" . \
      "Hostname:        " . $Identity . "\n" . \
      "Channel:         " . $Channel . "\n" . \
      "RouterOS:        " . $InstalledVersion . "\n\n" . \
      "Backup attached: " . $BackupStatus . "\n" . \
      "Config attached: " . $ConfigStatus . "\n" . \
      "Cloud backup:    " . $CloudStatus) \
    file=$Attach;
}
